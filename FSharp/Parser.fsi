// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | REPEAT
  | WHILE
  | DO
  | UNTIL
  | FOR
  | SKIP
  | TO
  | TRUE
  | FALSE
  | START_STMT
  | END_STMT
  | COMMA
  | PLUS
  | MINUS
  | MULT
  | ASSIGN
  | INCEQ
  | DECEQ
  | MULTEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | COMP
  | STRING of (string)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_REPEAT
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_UNTIL
    | TOKEN_FOR
    | TOKEN_SKIP
    | TOKEN_TO
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_START_STMT
    | TOKEN_END_STMT
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_ASSIGN
    | TOKEN_INCEQ
    | TOKEN_DECEQ
    | TOKEN_MULTEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COMP
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_prog
    | NONTERM_seq_expr
    | NONTERM_statement
    | NONTERM_bexpr
    | NONTERM_aexpr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Ast.Statement ) 
