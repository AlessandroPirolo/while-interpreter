// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


    open Ast


# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | REPEAT
  | WHILE
  | DO
  | UNTIL
  | FOR
  | SKIP
  | TO
  | TRUE
  | FALSE
  | START_STMT
  | END_STMT
  | COMMA
  | PLUS
  | MINUS
  | MULT
  | ASSIGN
  | INCEQ
  | DECEQ
  | MULTEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | COMP
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_REPEAT
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_UNTIL
    | TOKEN_FOR
    | TOKEN_SKIP
    | TOKEN_TO
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_START_STMT
    | TOKEN_END_STMT
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_ASSIGN
    | TOKEN_INCEQ
    | TOKEN_DECEQ
    | TOKEN_MULTEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COMP
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_prog
    | NONTERM_seq_expr
    | NONTERM_statement
    | NONTERM_bexpr
    | NONTERM_aexpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | REPEAT  -> 4 
  | WHILE  -> 5 
  | DO  -> 6 
  | UNTIL  -> 7 
  | FOR  -> 8 
  | SKIP  -> 9 
  | TO  -> 10 
  | TRUE  -> 11 
  | FALSE  -> 12 
  | START_STMT  -> 13 
  | END_STMT  -> 14 
  | COMMA  -> 15 
  | PLUS  -> 16 
  | MINUS  -> 17 
  | MULT  -> 18 
  | ASSIGN  -> 19 
  | INCEQ  -> 20 
  | DECEQ  -> 21 
  | MULTEQ  -> 22 
  | LT  -> 23 
  | GT  -> 24 
  | LEQ  -> 25 
  | GEQ  -> 26 
  | EQ  -> 27 
  | NEQ  -> 28 
  | AND  -> 29 
  | OR  -> 30 
  | NOT  -> 31 
  | COMP  -> 32 
  | STRING _ -> 33 
  | INT _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_REPEAT 
  | 5 -> TOKEN_WHILE 
  | 6 -> TOKEN_DO 
  | 7 -> TOKEN_UNTIL 
  | 8 -> TOKEN_FOR 
  | 9 -> TOKEN_SKIP 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_TRUE 
  | 12 -> TOKEN_FALSE 
  | 13 -> TOKEN_START_STMT 
  | 14 -> TOKEN_END_STMT 
  | 15 -> TOKEN_COMMA 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_MINUS 
  | 18 -> TOKEN_MULT 
  | 19 -> TOKEN_ASSIGN 
  | 20 -> TOKEN_INCEQ 
  | 21 -> TOKEN_DECEQ 
  | 22 -> TOKEN_MULTEQ 
  | 23 -> TOKEN_LT 
  | 24 -> TOKEN_GT 
  | 25 -> TOKEN_LEQ 
  | 26 -> TOKEN_GEQ 
  | 27 -> TOKEN_EQ 
  | 28 -> TOKEN_NEQ 
  | 29 -> TOKEN_AND 
  | 30 -> TOKEN_OR 
  | 31 -> TOKEN_NOT 
  | 32 -> TOKEN_COMP 
  | 33 -> TOKEN_STRING 
  | 34 -> TOKEN_INT 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_seq_expr 
    | 4 -> NONTERM_seq_expr 
    | 5 -> NONTERM_seq_expr 
    | 6 -> NONTERM_statement 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statement 
    | 10 -> NONTERM_statement 
    | 11 -> NONTERM_statement 
    | 12 -> NONTERM_statement 
    | 13 -> NONTERM_statement 
    | 14 -> NONTERM_statement 
    | 15 -> NONTERM_statement 
    | 16 -> NONTERM_statement 
    | 17 -> NONTERM_bexpr 
    | 18 -> NONTERM_bexpr 
    | 19 -> NONTERM_bexpr 
    | 20 -> NONTERM_bexpr 
    | 21 -> NONTERM_bexpr 
    | 22 -> NONTERM_bexpr 
    | 23 -> NONTERM_bexpr 
    | 24 -> NONTERM_bexpr 
    | 25 -> NONTERM_bexpr 
    | 26 -> NONTERM_bexpr 
    | 27 -> NONTERM_bexpr 
    | 28 -> NONTERM_bexpr 
    | 29 -> NONTERM_aexpr 
    | 30 -> NONTERM_aexpr 
    | 31 -> NONTERM_aexpr 
    | 32 -> NONTERM_aexpr 
    | 33 -> NONTERM_aexpr 
    | 34 -> NONTERM_aexpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | REPEAT  -> "REPEAT" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | UNTIL  -> "UNTIL" 
  | FOR  -> "FOR" 
  | SKIP  -> "SKIP" 
  | TO  -> "TO" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | START_STMT  -> "START_STMT" 
  | END_STMT  -> "END_STMT" 
  | COMMA  -> "COMMA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | ASSIGN  -> "ASSIGN" 
  | INCEQ  -> "INCEQ" 
  | DECEQ  -> "DECEQ" 
  | MULTEQ  -> "MULTEQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | COMP  -> "COMP" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | REPEAT  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | UNTIL  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | START_STMT  -> (null : System.Object) 
  | END_STMT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | INCEQ  -> (null : System.Object) 
  | DECEQ  -> (null : System.Object) 
  | MULTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | COMP  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;4us;65535us;0us;3us;6us;7us;11us;9us;50us;10us;9us;65535us;0us;5us;6us;5us;11us;5us;14us;15us;16us;17us;20us;21us;22us;23us;48us;49us;50us;5us;7us;65535us;12us;13us;18us;19us;24us;25us;56us;52us;57us;53us;58us;54us;75us;55us;25us;65535us;12us;61us;18us;61us;24us;61us;27us;28us;32us;33us;34us;35us;36us;37us;38us;39us;40us;41us;44us;45us;46us;47us;56us;61us;57us;61us;58us;61us;63us;64us;65us;66us;67us;68us;69us;70us;71us;72us;73us;74us;75us;62us;81us;77us;82us;78us;83us;79us;86us;80us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;10us;20us;28us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;2us;5us;1us;2us;1us;3us;2us;4us;16us;3us;4us;5us;16us;2us;4us;16us;2us;5us;5us;2us;5us;16us;1us;5us;1us;6us;3us;6us;17us;18us;1us;6us;1us;6us;1us;6us;1us;6us;1us;7us;3us;7us;17us;18us;1us;7us;1us;7us;1us;8us;1us;8us;1us;8us;3us;8us;17us;18us;5us;9us;11us;12us;13us;14us;1us;9us;4us;9us;29us;30us;31us;1us;10us;1us;11us;1us;11us;1us;11us;4us;11us;29us;30us;31us;1us;11us;4us;11us;29us;30us;31us;1us;12us;4us;12us;29us;30us;31us;1us;13us;4us;13us;29us;30us;31us;1us;14us;4us;14us;29us;30us;31us;1us;15us;1us;15us;1us;15us;4us;15us;29us;30us;31us;1us;15us;4us;15us;29us;30us;31us;1us;15us;1us;15us;1us;16us;1us;16us;3us;17us;17us;18us;3us;17us;18us;18us;3us;17us;18us;19us;3us;17us;18us;28us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;9us;22us;23us;24us;25us;26us;27us;29us;30us;31us;10us;22us;23us;24us;25us;26us;27us;29us;30us;31us;34us;1us;22us;4us;22us;29us;30us;31us;1us;23us;4us;23us;29us;30us;31us;1us;24us;4us;24us;29us;30us;31us;1us;25us;4us;25us;29us;30us;31us;1us;26us;4us;26us;29us;30us;31us;1us;27us;4us;27us;29us;30us;31us;2us;28us;34us;1us;28us;4us;29us;29us;30us;31us;4us;29us;30us;30us;31us;4us;29us;30us;31us;31us;4us;29us;30us;31us;34us;1us;29us;1us;30us;1us;31us;1us;32us;1us;33us;1us;34us;1us;34us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;16us;20us;23us;26us;29us;31us;33us;37us;39us;41us;43us;45us;47us;51us;53us;55us;57us;59us;61us;65us;71us;73us;78us;80us;82us;84us;86us;91us;93us;98us;100us;105us;107us;112us;114us;119us;121us;123us;125us;130us;132us;137us;139us;141us;143us;145us;149us;153us;157us;161us;163us;165us;167us;169us;171us;181us;192us;194us;199us;201us;206us;208us;213us;215us;220us;222us;227us;229us;234us;237us;239us;244us;249us;254us;259us;261us;263us;265us;267us;269us;271us;|]
let _fsyacc_action_rows = 88
let _fsyacc_actionTableElements = [|7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;6us;33us;26us;0us;49152us;0us;16385us;2us;32768us;0us;4us;32us;11us;0us;16386us;0us;16387us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;6us;33us;26us;2us;32768us;14us;8us;32us;11us;0us;16388us;1us;16389us;32us;11us;2us;32768us;14us;51us;32us;11us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;6us;33us;26us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;3us;32768us;2us;14us;29us;56us;30us;57us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;50us;33us;26us;1us;32768us;3us;16us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;50us;33us;26us;0us;16390us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;3us;32768us;6us;20us;29us;56us;30us;57us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;50us;33us;26us;0us;16391us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;50us;33us;26us;1us;32768us;7us;24us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;2us;16392us;29us;56us;30us;57us;5us;32768us;15us;30us;19us;27us;20us;38us;21us;40us;22us;36us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16393us;16us;81us;17us;82us;18us;83us;0us;16394us;1us;32768us;33us;31us;1us;32768us;19us;32us;3us;32768us;13us;86us;33us;85us;34us;84us;4us;32768us;15us;34us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16395us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16396us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16397us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16398us;16us;81us;17us;82us;18us;83us;1us;32768us;33us;43us;1us;32768us;19us;44us;3us;32768us;13us;86us;33us;85us;34us;84us;4us;32768us;10us;46us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;4us;32768us;6us;48us;16us;81us;17us;82us;18us;83us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;50us;33us;26us;0us;16399us;7us;32768us;1us;12us;4us;22us;5us;18us;8us;42us;9us;29us;13us;6us;33us;26us;0us;16400us;2us;16401us;29us;56us;30us;57us;2us;16402us;29us;56us;30us;57us;2us;16403us;29us;56us;30us;57us;3us;32768us;14us;76us;29us;56us;30us;57us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;0us;16404us;0us;16405us;9us;32768us;16us;81us;17us;82us;18us;83us;23us;69us;24us;71us;25us;63us;26us;65us;27us;67us;28us;73us;10us;32768us;14us;87us;16us;81us;17us;82us;18us;83us;23us;69us;24us;71us;25us;63us;26us;65us;27us;67us;28us;73us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16406us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16407us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16408us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16409us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16410us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;16411us;16us;81us;17us;82us;18us;83us;6us;32768us;11us;59us;12us;60us;13us;75us;31us;58us;33us;85us;34us;84us;0us;16412us;3us;16413us;16us;81us;17us;82us;18us;83us;3us;16414us;16us;81us;17us;82us;18us;83us;3us;16415us;16us;81us;17us;82us;18us;83us;4us;32768us;14us;87us;16us;81us;17us;82us;18us;83us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;32768us;13us;86us;33us;85us;34us;84us;3us;32768us;13us;86us;33us;85us;34us;84us;0us;16416us;0us;16417us;3us;32768us;13us;86us;33us;85us;34us;84us;0us;16418us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;10us;13us;14us;15us;23us;26us;27us;29us;32us;40us;47us;51us;59us;61us;69us;70us;77us;81us;89us;90us;98us;100us;107us;110us;116us;120us;124us;125us;127us;129us;133us;138us;142us;146us;150us;154us;158us;162us;166us;170us;172us;174us;178us;183us;187us;192us;200us;201us;209us;210us;213us;216us;219us;223us;230us;237us;244us;245us;246us;256us;267us;271us;275us;279us;283us;287us;291us;295us;299us;303us;307us;311us;315us;322us;323us;327us;331us;335us;340us;344us;348us;352us;353us;354us;358us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;1us;3us;3us;6us;4us;4us;3us;1us;7us;3us;3us;3us;8us;3us;3us;3us;2us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;3us;3us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;6us;6us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;16386us;16387us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16394us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16404us;16405us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16412us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16416us;16417us;65535us;16418us;|]
let _fsyacc_reductions = lazy [|
# 311 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Ast.Statement  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 320 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                     _1 
                   )
# 25 "Parser.fsy"
                 :  Ast.Statement ));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                                  _1 
                   )
# 28 "Parser.fsy"
                 : 'gentype_prog));
# 342 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                                            _1 
                   )
# 31 "Parser.fsy"
                 : 'gentype_seq_expr));
# 353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                                       _2 
                   )
# 32 "Parser.fsy"
                 : 'gentype_seq_expr));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_seq_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                                       Composition (_1, _3) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_seq_expr));
# 376 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_statement in
            let _6 = parseState.GetInput(6) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                                                 Conditional (_2, _4, _6) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_statement));
# 389 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                                            While (_2, _4) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_statement));
# 401 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            let _4 = parseState.GetInput(4) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                                            Repeat (_2, _4) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_statement));
# 413 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                                            Assignment (_1, _3) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_statement));
# 425 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                                       Skip 
                   )
# 41 "Parser.fsy"
                 : 'gentype_statement));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_aexpr in
            let _7 = parseState.GetInput(7) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                                                 PairAssign (_1, _3, _5, _7) 
                   )
# 42 "Parser.fsy"
                 : 'gentype_statement));
# 449 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                                            OpAssign (_1, "*=", _3) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_statement));
# 461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                            OpAssign (_1, "+=", _3) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_statement));
# 473 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                            OpAssign (_1, "-=", _3) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_statement));
# 485 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_aexpr in
            let _6 = parseState.GetInput(6) :?> 'gentype_aexpr in
            let _8 = parseState.GetInput(8) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                                   For (_2, _4, _6, _8) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_statement));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                       _2 
                   )
# 47 "Parser.fsy"
                 : 'gentype_statement));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                           BBinOp (_1, "&&", _3) 
                   )
# 50 "Parser.fsy"
                 : 'gentype_bexpr));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                           BBinOp (_1, "||", _3) 
                   )
# 51 "Parser.fsy"
                 : 'gentype_bexpr));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                           BUniOp ("!", _2) 
                   )
# 52 "Parser.fsy"
                 : 'gentype_bexpr));
# 545 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                           BConst (true) 
                   )
# 53 "Parser.fsy"
                 : 'gentype_bexpr));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                           BConst (false) 
                   )
# 54 "Parser.fsy"
                 : 'gentype_bexpr));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                           BoolRelation (_1, "<=", _3) 
                   )
# 55 "Parser.fsy"
                 : 'gentype_bexpr));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                           BoolRelation (_1, ">=", _3) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_bexpr));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                           BoolRelation (_1, "=", _3) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_bexpr));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                           BoolRelation (_1, "<", _3) 
                   )
# 58 "Parser.fsy"
                 : 'gentype_bexpr));
# 613 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                           BoolRelation (_1, ">", _3) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_bexpr));
# 625 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                           BoolRelation (_1, "!=", _3) 
                   )
# 60 "Parser.fsy"
                 : 'gentype_bexpr));
# 637 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                           _2 
                   )
# 61 "Parser.fsy"
                 : 'gentype_bexpr));
# 648 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                           ABinOp (_1, "+", _3) 
                   )
# 64 "Parser.fsy"
                 : 'gentype_aexpr));
# 660 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                           ABinOp (_1, "-", _3) 
                   )
# 65 "Parser.fsy"
                 : 'gentype_aexpr));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                           ABinOp (_1, "*", _3) 
                   )
# 66 "Parser.fsy"
                 : 'gentype_aexpr));
# 684 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                           AConst (_1) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_aexpr));
# 695 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                           Var (_1) 
                   )
# 68 "Parser.fsy"
                 : 'gentype_aexpr));
# 706 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                           _2 
                   )
# 69 "Parser.fsy"
                 : 'gentype_aexpr));
|]
# 718 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf :  Ast.Statement  =
    engine lexer lexbuf 0 :?> _
