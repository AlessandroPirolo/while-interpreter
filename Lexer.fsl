{

open System
open FSharp.Text.Lexing

open Ast
open Parser

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf
let newline (lexbuf: LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

let whitespace = [' ' '\t' ]
let newline = ('\n' | "\r\n")
let digit = ['0'-'9'] 
let int = ['-']?digit+
let idbody = ['a'-'z' 'A'-'Z' '0'-'9' '_']*['\'']*	
let Uid = ['A'-'Z'] idbody
let Lid = ['a'-'z' '_'] idbody
let id = Uid | Lid

rule tokenize = parse 
    | eof               { EOF }
    | whitespace        {tokenize lexbuf}
    | newline           { newline lexbuf; tokenize lexbuf }
    
    | '+'			{ PLUS }
	| '-'			{ MINUS }
	| '*'			{ MULT }
    | ":="          { ASSIGN }
    | "+="          { INCEQ }
    | "-="          { DECEQ }
    | "*="          { MULTEQ }
	| "!="			{ NEQ }
    | '='			{ EQ }
	| '<'			{ LT }
	| '>'			{ GT }
	| "<="			{ LEQ }
	| ">="			{ GEQ }
	| "||"			{ OR }
	| "&&"			{ AND }
	| "!"			{ NOT }
    | "("           { START_STMT }
    | ")"           { END_STMT }
    | ";"           { COMP }
    | ","           { COMMA }

    // keywords
    | "if"          { IF }
    | "then"        { THEN }
    | "else"		{ ELSE }
	| "true"		{ TRUE }
	| "false"		{ FALSE }
    | "repeat"      { REPEAT }
    | "while"       { WHILE }
    | "do"          { DO }
    | "until"       { UNTIL }
    | "for"         { FOR }
    | "skip"        { SKIP }
    | "to"          { TO }

	// identifiers
	| id 		            { STRING (lexeme lexbuf) }
    | int                   { INT (Int32.Parse (lexeme lexbuf)) }
    | _                     { lexeme lexbuf |> sprintf "Parsing error: %s" |> failwith }
